#######################
# Corte com gdal.Warp #
#######################

img = gdal.Open('../IMGS/odm_orthophoto.tif')

for i in grid.index:
    
    grid.loc[[i]].to_file('../IMGS/cut.gpkg', driver="GPKG")
    
    gdal.Warp('../IMGS/CORTES/corte_{i}.tif'.format(i=i), 
              img, 
              cutlineDSName='../IMGS/cut.gpkg',
              xRes = img.GetGeoTransform()[1],
              yRes = img.GetGeoTransform()[-1],
#               width=256,
#               height=256,
              targetAlignedPixels=True,
              cropToCutline=True)

       
###########################
# Corte com rasterio.mask #
###########################

with rasterio.open('../IMGS/odm_orthophoto_extended.tif') as img:
    for i in grid.index:
        
        dic = grid.loc[[i]].__geo_interface__
        
        polygon = [dic['features'][0][ 'geometry']]
        
        out_image, out_transform = mask(img, polygon, crop=True, filled=True)
        
        out_meta = img.meta.copy()
        
        out_meta.update({"driver": "GTiff",
                         "height": out_image.shape[1],
                         "width": out_image.shape[2],
                         "transform": out_transform})
        
        with rasterio.open('../IMGS/CORTES/corte_{}.tif'.format(i), "w", **out_meta) as dest:
            dest.write(out_image)
            
            
#######################################################################
# Verificar se os patches apresentam o mesmo tamanho (256, 512... px) #
#######################################################################

out_of_size = {}
for i in grid.index:
    
    img = gdal.Open('../IMGS/CORTES/corte_{}.tif'.format(i))
                   
    if img.RasterXSize != 256:    
        out_of_size[i] = {'x': img.RasterXSize}
        
    if img.RasterYSize != 256:
        out_of_size[i] = {'y': img.RasterYSize}
        
if len(out_of_size) == 0:
    print("Prima!!")
else:
    print(out_of_size)
    
    
##################################################################################################################################################
############################################### From_patches_to_inputsRCNN #######################################################################
##################################################################################################################################################


import os
import geopandas as gpd
from shutil import copyfile
from PIL import Image

--------------------------------

id_all = gpd.read_file('../VECTOR/grid_from_img-all.geojson').set_index('id')

id_train = id_all[id_all['layer'] == 'grid_from_img-train'].index
id_val = id_all[id_all['layer'] == 'grid_from_img-val'].index
id_test = id_all[id_all['layer'] == 'grid_from_img-test'].index

--------------------------------

for i in id_train:
    copyfile('../IMGS/CORTES/corte_{}.tif'.format(i), '../Mask_RCNN/datasets/canopy/train/images/TIF/{:04}.tif'.format(i))
    
for i in id_val:
    copyfile('../IMGS/CORTES/corte_{}.tif'.format(i), '../Mask_RCNN/datasets/canopy/val/images/TIF/{:04}.tif'.format(i))
    
for i in id_test:
    copyfile('../IMGS/CORTES/corte_{}.tif'.format(i), '../Mask_RCNN/datasets/canopy/real_test/images/TIF/{:04}.tif'.format(i))
    
--------------------------------

for root, dirs, files in os.walk('../Mask_RCNN/datasets/canopy/', topdown=False):
    
    if root[-4:] == '/TIF':
        
        for name in files:
            
            print(os.path.join(root, name))

            if os.path.splitext(os.path.join(root, name))[1].lower() == ".tif":

                outpath = os.path.split(root)[0]

                if os.path.isfile(os.path.splitext(os.path.join(outpath, name))[0] + ".jpg"):
                    print('A jpeg file already exists for {}'.format(name))

                # If a jpeg is *NOT* present, create one from the tiff.
                else:
                    outfile = os.path.splitext(os.path.join(outpath, name))[0] + ".jpg"
                    try:
                        im = Image.open(os.path.join(root, name))
                        print("Generating jpeg for {}".format(name))
                        im.thumbnail(im.size)
                        im.convert('RGB').save(outfile, "JPEG", quality=100)
                    except Exception as e:
                        print(e)
                        
                        
##################################################################################################################################################
##################################################################################################################################################





    
    
